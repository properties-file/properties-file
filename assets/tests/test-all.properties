# You are reading a comment in ".properties" file.
! The exclamation mark can also be used for comments.
# Lines with "properties" contain a key and a value separated by a delimiting character.
# There are 3 types of delimiting characters: '=' (equal), ':' (colon) and whitespace characters other 
# than carriage returns and newlines: ' ' (space), \t (tab) and \f (formfeed).
website = https://en.wikipedia.org/
language : English
topic .properties file
category    file format
# A word on a line will just create a key with no value.
empty
orLikeThis =
evenLikeThis\\
# Likewise, if a line starts with a delimiter, it will create a value without a key.
= This line has no key.
    : So does this line.
# Whitespace characters between the key, the value and the delimiter are ignored.
# This means that the following entries are equivalent (other than for readability).
hello=hello
hello = hello
hello  =  hello
# Keys with the same name will be overwritten by the key that is the closest to the end of a file.
# For example the final value for "duplicateKey" will be "second".
duplicateKey = first
duplicateKey = second
# To use the delimiter characters inside a key, you need to escape them with a \.
# However, there is no need to do this in the value.
keyWithDelimiters\:\=\ = This is the value for the key "keyWithDelimiters:= "
# Adding a \ at the end of a line means that the value continues to the next line.
multiline = This line \
continues \
on 3 lines
# You can also do the same for keys, even if there is no real reason to do this.
# In the following example, the value for "multilineKey" will be "this is a multiline key".
multiline\
Key this is a multiline key
# If you want your value to include a \, it should be escaped by another \.
path = c:\\wiki\\templates
# This means that if the number of \ at the end of the line is even, the next line is not included in the value. 
# In the following example, the value for "evenKey" is "This is on one line\".
evenKey = This is on one line\\
# This line is a normal comment and is not included in the value for "evenKey"
# If the number of \ is odd, then the next line is included in the value.
# In the following example, the value for "oddKey" is "This is line one and\#This is line two".
oddKey = This is line one and\\\
# This is line two
# This also applies with keys.
# In the following example, the value for "keyWitheven\" is "this colon is not escaped".
keyWitheven\\:this colon is not escaped
# White space characters are removed before each line, but trailing spaces aren't.
    noWhiteSpace = The key will be "noWhiteSpace" without any whitespace.    
# Leading whitespace is also removed from keys when using space separators.
    leadingSpacesWithSpaceSeparator This key has leading spaces but uses a space separator
# Values with leading spaces must be escaped for them to be preseved.
valueWithLeadingSpaces = \   There are 3 leading spaces.
# Make sure to add your spaces before your \ if you need them on the next line.
# In the following example, the value for "welcome" is "Welcome to Wikipedia!    ".
welcome = Welcome to \
          Wikipedia!    
# You can have empty lines, where all white space characters will be ignored.

    # You can also have whitespace before comments.

# If you have leading non-breaking spaces, they will be preserved.
leadingNonBreakingSpace =  this space should be part of the key
# If you have trailing non-breaking spaces, they will be preserved.
trailingNonBreakingSpace = this line will have a trailing non-breaking space 
# If you need to add carriage returns and newlines, they need to be escaped using \r and \n respectively.
# You can also optionally escape tabs with \t for readability purposes.
# \f (formfeed) can also be escaped even if it's not really useful.
valueWithEscapes = This is a newline\n, a carriage return\r, a tab\t and a formfeed\f.
# Using \ in front of non-escape characters will remove them from the output.
# In the following example, the value for "keyWithBackslashes" is "This has random backslashes".
keyWith\Backslashes = This\ has ran\d\o\m backslashes
# You can also use Unicode escape characters, limited to 2 bytes or 65,535 characters.
# In the following example, the value for "encodedHelloInJapanese" is "こんにちは".
encodedHelloInJapanese = \u3053\u3093\u306b\u3061\u306f
# Using \u without being followed by four hexadecimal digits will throw an exception.
# But with more modern file encodings like UTF-8, you can directly use supported characters.
helloInJapanese = こんにちは
